from tensorflow import kerasimport numpy as npfrom random import randintimport randomimport albumentations as Aclass Augmentation:    def __init__(self):        self.__dataset = keras.datasets.fashion_mnist        self.__augmentations = [            A.RandomRotate90(),            A.Flip(),            A.Transpose(),            A.OneOf([                A.MotionBlur(p=.2),                A.MedianBlur(blur_limit=3, p=0.1),                A.Blur(blur_limit=3, p=0.1),            ], p=0.2),            A.ShiftScaleRotate(shift_limit=0.0625, scale_limit=0.2, rotate_limit=45, p=0.2),            A.OneOf([                A.OpticalDistortion(p=0.3),                A.GridDistortion(p=.1),                A.IAAPiecewiseAffine(p=0.3),            ], p=0.2),            A.OneOf([                A.CLAHE(clip_limit=2),                A.IAASharpen(),                A.IAAEmboss(),                A.RandomBrightnessContrast(),            ], p=0.3),            A.HueSaturationValue(p=0.3),        ]    def growing_augmentation(self,                             multiplicity: int=1                             ):        '''Данный метод берет 1 элемент выборки и аугментирует его `multiplicity` раз        :param multiplicity: множественность аугментации        :return: Аугментированный датасет, увеличенный в `multiplicity` раз,                 Соответствующие labels -> (aug_dataset, extended_labels)        '''        #  .load_data() -> четыре массива NumPy:        #  1. Массивы train_images и train_labels — это данные, которые использует модель для обучения        #  2. Массивы test_images и test_labels используются для тестирования модели        (train_images,         train_labels), \        (test_images,         test_labels) = self.__dataset.load_data()        augmented_images = []        extended_labels = train_labels        for train_image_idx in range(len(train_images)):            growing_images = []            for i in range(multiplicity):                growing_images.append(self.__random_augmentation(image=train_images[train_image_idx]))            augmented_images += growing_images            extended_labels = np.insert(extended_labels,                                        train_image_idx,                                        [train_labels[train_image_idx] for i in range(multiplicity - 1)]            )        return augmented_images, extended_labels    def __random_augmentation(self,                              image):        augs_size = len(self.__augmentations)        count_use_augs = randint(1, augs_size)        use_augs = []        for i in range(count_use_augs):            take_aug_idx = randint(0, augs_size - 1)            use_augs.append(self.__augmentations[take_aug_idx])        transform = A.Compose(use_augs)        random.seed(42)        augmented_image = transform(image=image)['image']        return augmented_image