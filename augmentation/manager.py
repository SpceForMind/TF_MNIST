from tensorflow import kerasimport numpy as npfrom matplotlib import pyplot as pltfrom random import randint, shuffleimport albumentations as Aclass AugmentationManager:    def __init__(self):        self.__dataset = keras.datasets.fashion_mnist        self.__augmentations = [            A.JpegCompression(quality_lower=0, quality_upper=1, p=1),            A.Rotate(limit=45),            A.Blur(blur_limit=(3, 3), p=1),            A.Cutout(num_holes=9, max_h_size=1, max_w_size=1, fill_value=255, p=1)        ]    def growing_augmentation(self,                             multiplicity: int=1                             ):        '''Данный метод берет 1 элемент выборки и аугментирует его `multiplicity` раз        :param multiplicity: множественность аугментации        :return: Аугментированный датасет, увеличенный в `multiplicity` раз,                 Соответствующие labels -> (aug_dataset, extended_labels)        '''        #  .load_data() -> четыре массива NumPy:        #  1. Массивы train_images и train_labels — это данные, которые использует модель для обучения        #  2. Массивы test_images и test_labels используются для тестирования модели        (train_images,         train_labels), \        (test_images,         test_labels) = self.__dataset.load_data()        train_images = train_images[0 : 10000]        train_labels = train_labels[0 : 10000]        augmented_images = []        extended_labels = np.array([[train_labels[train_label_idx] for i in range(multiplicity)]                                    for train_label_idx in range(len(train_labels))])        extended_labels = extended_labels.flatten()        for train_image_idx in range(len(train_images)):            # if train_image_idx == 10:            #     for aug_img_idx in range(10):            #         self.__visualize(augmented_images[aug_img_idx])            print('Process %i/%i...' % (train_image_idx, len(train_images)))            growing_images = self.__random_multiplicity_augmentation(image=train_images[train_image_idx],                                                                     multiplicity=multiplicity)            augmented_images += growing_images        augmented_images = np.array([img for img in augmented_images])        for i in range(5):            self.__visualize(augmented_images[i])        print(len(augmented_images))        return augmented_images, extended_labels    def __visualize(self, image):        plt.figure(figsize=(10, 10))        plt.axis('off')        plt.imshow(image)        plt.show()    def __random_multiplicity_augmentation(self,                                           image,                                           multiplicity: int):        '''        :param image:        :param multiplicity: множественность        :return: `multiplicity` аугментированных изображений        '''        aug_indexes = [randint(0, len(self.__augmentations) - 1) for i in range(multiplicity)]        aug_images = []        for i in range(multiplicity):            print('Augmenting %i/%i' % (i, multiplicity))            aug_image = self.__augmentations[aug_indexes[i]](image=image)['image']            aug_images.append(aug_image)        return aug_images